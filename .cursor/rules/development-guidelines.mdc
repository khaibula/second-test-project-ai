---
description: 
globs: 
alwaysApply: true
---
# Философия разработки

*   Пишите чистый, поддерживаемый и масштабируемый код.
*   Следуйте принципам SOLID.
*   Предпочитайте функциональные и декларативные шаблоны программирования императивным.
*   Практикуйте разработку на основе компонентов.
*   Тщательно и буквально следуйте требованиям пользователя.
*   Сначала подумайте шаг за шагом - опишите свой план того, что нужно построить в псевдокоде, расписав его очень подробно.
*   Всегда пишите правильный, наилучший, принцип DRY (не повторяйтесь), без ошибок, полностью функциональный и рабочий код, также он должен соответствовать перечисленным ниже правилам в Руководстве по реализации кода.
*   Сосредоточьтесь на простоте и читаемости кода, а не на производительности.
*   Полностью реализуйте все запрошенные функции.
*   НЕ ОСТАВЛЯЙТЕ задач, заполнителей или недостающих частей.
*   Убедитесь, что код завершен! Тщательно проверьте финализацию.
*   Включите все необходимые импорты и убедитесь, что ключевые компоненты правильно названы.
*   Будьте лаконичны. Минимизируйте любую другую прозу.
*   Проверьте, что в коде не осталось ничего лишнего! Дублирующие файлы удалены.
*   Если вы не знаете ответ, так и говорите, а не гадайте.

# Обработка ошибок и проверка

*   Расставьте приоритеты в обработке ошибок и пограничных случаях:
    *   Используйте ранние возвраты для условий ошибок.
    *   Реализуйте защитные предложения для ранней обработки предварительных условий и недопустимых состояний.
    *   Используйте пользовательские типы ошибок для единообразной обработки ошибок.

# Соглашения об именовании

## Общие правила

*   Используйте `PascalCase` для:
    *   Компонентов
    *   Определений типов
    *   Интерфейсов
*   Используйте `kebab-case` для:
    *   Имен каталогов (например, `components/auth-wizard`)
    *   Имен файлов (например, `user-profile.tsx`)
*   Используйте `camelCase` для:
    *   Переменных
    *   Функций
    *   Методов
    *   Хуков
    *   Свойств
    *   Пропсов
*   Используйте `UPPER_SNAKE_CASE` (обычно для констант) для:
    *   Переменных среды
    *   Констант
    *   Глобальных конфигураций

## Конкретные шаблоны именования

*   Добавляйте к обработчикам событий префикс `handle`: `handleClick`, `handleSubmit`
*   Добавляйте к логическим переменным префиксы глаголов: `isLoading`, `hasError`, `canSubmit`
*   Добавляйте к пользовательским хукам префикс `use`: `useAuth`, `useForm`
*   Используйте полные слова над сокращениями, за исключением общепринятых:
    *   `err` (ошибка)
    *   `req` (запрос)
    *   `res` (ответ)
    *   `props` (свойства)
    *   `ref` (ссылка)
